predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accura
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
predictors <- names(Default)[names(Default) != "default"]
accuracy_results <- numeric(length(predictors))
for (predictor in predictors) {
formula <- as.formula(paste("default ~", predictor))
fit <- glm(formula, data = train_data, family = "binomial")
predicted <- predict(fit, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
conf_matrix <- table(predicted_class, test_data$default)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy_results[predictor] <- accuracy
}
# Find the predictor with the highest accuracy
best_predictor <- names(accuracy_results)[which.max(accuracy_results)]
best_accuracy <- max(accuracy_results)
# Compare with the previous model (fit1)
improvement <- best_accuracy - accuracy
improvement
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
#Accuracy of individual levels 'Yes' and 'No'
accuracy_No <- conf_matrix[1, 1] / sum(conf_matrix[1, ])
accuracy_Yes <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
#Accuracy of individual levels 'Yes' and 'No'
accuracy_No <- conf_matrix[1, 1] / sum(conf_matrix[1, ])
accuracy_Yes <- conf_matrix[2, 2] / sum(conf_matrix[2, ])
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
#Accuracy of individual levels 'Yes' and 'No'
accuracy_No <- conf_matrix[1, 1] / sum(conf_matrix[1, ])
accuracy_Yes <- conf_matrix[1, 2] / sum(conf_matrix[2, ])
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- factor(predicted_class, levels = c("No", "Yes"))
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- factor(predicted_class, levels = c("No", "Yes"))
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
print(conf_matrix)
accuracy_No <- conf_matrix["No", "No"] / sum(conf_matrix["No", ])
accuracy_Yes <- conf_matrix["Yes", "Yes"] / sum(conf_matrix["Yes", ])
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
levels(predicted_class)
levels(test_data$default)
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
predictors <- names(Default)[names(Default) != "default"]
accuracy_results <- numeric(length(predictors))
for (predictor in predictors) {
formula <- as.formula(paste("default ~", predictor))
fit <- glm(formula, data = train_data, family = "binomial")
predicted <- predict(fit, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
conf_matrix <- table(predicted_class, test_data$default)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy_results[predictor] <- accuracy
}
# Find the predictor with the highest accuracy
best_predictor <- names(accuracy_results)[which.max(accuracy_results)]
best_accuracy <- max(accuracy_results)
# Compare with the previous model (fit1)
improvement <- best_accuracy - accuracy
improvement
setwd("C:/Users/soham/Documents/Github rep/5302-project")
df <- read.csv(file = "./dataset/breast-cancer-wisconsin.data", sep=",", header = FALSE)
df
colnames(df) <- c("Sample_code_number",
"Clump_thickness",
"Uniformity_of_cell_size",
"Uniformity_of_cell_shape",
"Marginal_adhesion",
"Single_epithelial_cell_size",
"Bare_nuclei",
"Bland_chromatin",
"Normal_nucleoli",
"Mitoses")
str(df)
colnames(df) <- c("sample_code_number",
"clump_thickness",
"uniformity_of_cell_size",
"uniformity_of_cell_shape",
"marginal_adhesion",
"single_epithelial_cell_size",
"bare_nuclei",
"bland_chromatin",
"normal_nucleoli",
"mitoses",
"class")
str(df)
head(df)
#Checking for missing variables
sapply(df, function(x) sum(is.na(x)))
df$bare_nuclei
head(df$bare_nuclei)
ddf <- df
ddf$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
ddf$bare_neuclei
df$bare_nuclei
ddf$bare_nuclei <- as.integer(ifelse(ddf$bare_nuclei), mean(ddf$bare_nuclei,na.rm = TRUE, ddf$bare_nuclei))
ddf$bare_nuclei
ddf$bare_nuclei <- as.integer(ifelse(ddf$bare_nuclei), mean(ddf$bare_nuclei,na.rm = TRUE), ddf$bare_nuclei))
ddf$bare_nuclei
View(ddf)
View(data)
ddf$bare_nuclei <- as.integer(ifelse(ddf$bare_nuclei), mean(ddf$bare_nuclei,na.rm = TRUE), ddf$bare_nuclei)
ddf$bare_nuclei
ddf <- df
ddf$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
ddf$bare_neuclei
df$bare_nuclei
ddf$bare_nuclei <- as.integer(ifelse(ddf$bare_nuclei), mean(ddf$bare_nuclei,na.rm = TRUE), ddf$bare_nuclei)
ddf$bare_nuclei
ddf <- df
ddf$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
ddf$bare_neuclei
df$bare_nuclei
# Impute missing values with mean (you can choose a different imputation method)
ddf$bare_nuclei <- as.integer(ifelse(is.na(ddf$bare_nuclei), mean(ddf$bare_nuclei, na.rm = TRUE), ddf$bare_nuclei))
ddf$bare_nuclei
ddf$bare_nuclei <- ifelse(is.na(ddf$bare_nuclei), mean(ddf$bare_nuclei, na.rm = TRUE), ddf$bare_nuclei)
ddf$bare_nuclei
ddf$bare_nuclei <- ifelse(is.na(ddf$bare_nuclei), mean(ddf$bare_nuclei, na.rm = TRUE), ddf$bare_nuclei)
ddf$bare_nuclei
ddf$bare_nuclei <- ifelse(is.na(ddf$bare_nuclei), median(ddf$bare_nuclei, na.rm = TRUE), ddf$bare_nuclei)
ddf$bare_nuclei
ddf <- df
ddf$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
ddf$bare_neuclei
df$bare_nuclei
# Impute missing values with mean (you can choose a different imputation method)
ddf$bare_nuclei <- as.integer(ifelse(is.na(ddf$bare_nuclei), median(ddf$bare_nuclei, na.rm = TRUE), ddf$bare_nuclei))
ddf$bare_nuclei
ddf <- df
ddf$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
ddf$bare_neuclei
# Impute missing values with mean (you can choose a different imputation method)
ddf$bare_nuclei <- as.integer(ifelse(is.na(ddf$bare_nuclei), mean(ddf$bare_nuclei, na.rm = TRUE), ddf$bare_nuclei))
ddf$bare_nuclei
hist(ddf$bare_nuclei, na.rm=TRUE)
ddf$bare_nuclei <- ifelse(is.na(ddf$bare_nuclei), median(ddf$bare_nuclei, na.rm = TRUE), ddf$bare_nuclei)
ddf$bare_nuclei
hist(ddf$bare_nuclei)
dddf <- df
dddf$bare_nuclei <- ddf$bare_nuclei
dddf$bare_nuclei
ctr <- sum(is.na(ddf$bare_nuclei))
ctr
ddf <- df
ddf$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
ddf$bare_neuclei
# Impute missing values with mean (you can choose a different imputation method)
ddf$bare_nuclei <- as.integer(ifelse(is.na(ddf$bare_nuclei), mean(ddf$bare_nuclei, na.rm = TRUE), ddf$bare_nuclei))
ddf$bare_nuclei
ctr <- sum(is.na(ddf$bare_nuclei))
ctr
info(df)
summary(df)
df2
str(df)
#Providing feature names
colnames(df) <- c("sample_code_number",
"clump_thickness",
"uniformity_of_cell_size",
"uniformity_of_cell_shape",
"marginal_adhesion",
"single_epithelial_cell_size",
"bare_nuclei",
"bland_chromatin",
"normal_nucleoli",
"mitoses",
"class")
str(df)
head(df)
#Checking for missing variables
sapply(df, function(x) sum(is.na(x)))
df$bare_nuclei
head(df$bare_nuclei)
summary(df)
df2 <- df
df2
view(df2)
#Data Exploration
pairs(df, main = "Scatter plot", pch=21, col = blue)
#Data Exploration
pairs(df, main = "Scatter plot", pch=21, col = "blue"")
#Data Exploration
pairs(df, main = "Scatter plot", pch=21, col = "blue", panel = panel.smooth, cex=0.7)
#Data Exploration
plot(df)
#Data Exploration
plot(df)
pairs(df, pch=21, col="blue", panel=panel.smooth, cex=0.7)
hist(df2$clump_thickness)
hist(df2$uniformity_of_cell_size)
hist(df2$uniformity_of_cell_shape)
hist(df2$marginal_adhesion)
hist(df2$single_epithelial_cell_size)
hist(df2$bare_nuclei)
# Impute missing values with mean (you can choose a different imputation method)
df2$bare_nuclei <- as.integer(ifelse(is.na(df2$bare_nuclei), mean(df2$bare_nuclei, na.rm = TRUE), df2$bare_nuclei))
df2$bare_nuclei
df2$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
df2$bare_neuclei
# Impute missing values with mean (you can choose a different imputation method)
df2$bare_nuclei <- as.integer(ifelse(is.na(df2$bare_nuclei), median(df2$bare_nuclei, na.rm = TRUE), df2$bare_nuclei))
df2$bare_nuclei
hist(df2$bare_nuclei)
hist(df2$bland_chromatin)
hist(df2$normal_nucleoli)
hist(df2$mitoses)
hist(df2$class)
hist(df2$class, breaks = 2)
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 2)
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1)
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1)
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1))
# Assuming 'df2$class' is your numeric vector or column from the dataset
hist(df2$class, breaks = c(2, 4), col = "skyblue", main = "Histogram", xlab = "Values", ylab = "Frequency")
# Customize the x-axis labels
axis(side = 1, at = c(2, 4), labels = c(2, 4))
# Customize the x-axis labels
axis(side = 2, at = c(2, 4), labels = c(2, 4))
# Assuming 'df2$class' is your numeric vector or column from the dataset
hist(df2$class, breaks = c(2, 4), col = "skyblue", main = "Histogram", xlab = "Values", ylab = "Frequency")
# Customize the x-axis labels
axis(side = 2, at = c(2, 4), labels = c(2, 4))
# Customize the x-axis labels
axis(side = 1, at = c(2, 4), labels = c(2, 4))
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1)
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1))
hist(df2$mitoses)
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1))
hist(df2$class, breaks = c(2,4))
seq(min(df2$class), max(df2$class), length.out = 1)
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1))
hist(df2$class, breaks = c(2, 4), col = "skyblue", main = "Histogram", xlab = "Values", ylab = "Frequency", xlim = c(2, 4), axes = FALSE)
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1), axes = FALSE)
axis(at = c(2.5,3.5), c("Benign", "Malignant"))
axis(side=1, at = c(2.5,3.5), c("Benign", "Malignant"))
box()
axis(side = 2, at = pretty(count(df$class))
axis(side = 2, at = pretty(df$class)
axis(side = 2, at = pretty(df2$class)
axis(side=1, at = c(2.5,3.5), c("Benign", "Malignant"))
box()
axis(side = 2, at = pretty(df2$class)
axis(side = 2, at = pretty(df2$class))
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1), axes = FALSE)
axis(side=1, at = c(2.5,3.5), c("Benign", "Malignant"))
box()
axis(side = 2, at = pretty(df2$class))
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1), axes = FALSE)
axis(side=1, at = c(2.5,3.5), c("Benign", "Malignant"))
box()
axis(side = 2)
df <- read.csv(file = "./dataset/breast-cancer-wisconsin.data", sep=",", header = FALSE)
df
str(df)
#Providing feature names
colnames(df) <- c("sample_code_number",
"clump_thickness",
"uniformity_of_cell_size",
"uniformity_of_cell_shape",
"marginal_adhesion",
"single_epithelial_cell_size",
"bare_nuclei",
"bland_chromatin",
"normal_nucleoli",
"mitoses",
"class")
str(df)
head(df)
#Checking for missing variables
sapply(df, function(x) sum(is.na(x)))
df$bare_nuclei
head(df$bare_nuclei)
summary(df)
df2 <- df
df2
df2$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
df2$bare_neuclei
# Impute missing values with mean (you can choose a different imputation method)
df2$bare_nuclei <- as.integer(ifelse(is.na(df2$bare_nuclei), median(df2$bare_nuclei, na.rm = TRUE), df2$bare_nuclei))
df2$bare_nuclei
#Data Exploration
plot(df)
hist(df2$clump_thickness)
hist(df2$uniformity_of_cell_size)
hist(df2$uniformity_of_cell_shape)
hist(df2$marginal_adhesion)
hist(df2$single_epithelial_cell_size)
hist(df2$bare_nuclei)
hist(df2$bland_chromatin)
hist(df2$normal_nucleoli)
hist(df2$mitoses)
#code start
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1), axes = FALSE)
axis(side=1, at = c(2.5,3.5), c("Benign", "Malignant"))
box()
axis(side = 2)
#EDA
#Correlation analysis
cor(df2[df2$clump_thickness, df2$uniformity_of_cell_size,df2$uniformity_of_cell_shape,
df2$marginal_adhesion, df2$single_epithelial_cell_size, df2$bare_nuclei, df2$bland_chromatin,
df2$normal_nucleoli, df2$mitoses, df2$class])
#EDA
#Correlation analysis
cor(df2[ ,c(df2$clump_thickness, df2$uniformity_of_cell_size,df2$uniformity_of_cell_shape,
df2$marginal_adhesion, df2$single_epithelial_cell_size, df2$bare_nuclei, df2$bland_chromatin,
df2$normal_nucleoli, df2$mitoses, df2$class)])
# Example: Correlation matrix
cor(df2[, c("ClumP_thickness", "uniformity_of_cel_size","uniformity_of_cell_shape", "marginal_adhesion",
"single_epithelial_cell_size", "bare_nuclei", "bland_chromatin", "normal_nucleoli", "mitoses",
"class")])
# Example: Correlation matrix
cor(df2[, c("clump_thickness", "uniformity_of_cel_size","uniformity_of_cell_shape", "marginal_adhesion",
"single_epithelial_cell_size", "bare_nuclei", "bland_chromatin", "normal_nucleoli", "mitoses",
"class")])
# Example: Correlation matrix
cor(df2[, c("clump_thickness", "uniformity_of_cell_size","uniformity_of_cell_shape", "marginal_adhesion",
"single_epithelial_cell_size", "bare_nuclei", "bland_chromatin", "normal_nucleoli", "mitoses",
"class")])
df2$bare_nuclei[ddf$bare_nuclei == "?"] <- NA
df2$bare_neuclei
# Impute missing values with mean (you can choose a different imputation method)
df2$bare_nuclei <- as.integer(ifelse(is.na(df2$bare_nuclei), median(df2$bare_nuclei, na.rm = TRUE), df2$bare_nuclei))
df2$bare_nuclei
#Data Exploration
plot(df)
hist(df2$clump_thickness)
hist(df2$uniformity_of_cell_size)
hist(df2$uniformity_of_cell_shape)
hist(df2$marginal_adhesion)
hist(df2$single_epithelial_cell_size)
hist(df2$bare_nuclei)
hist(df2$bland_chromatin)
hist(df2$normal_nucleoli)
hist(df2$mitoses)
#code start
hist(df2$class, breaks = seq(min(df2$class), max(df2$class), length.out = 1), axes = FALSE)
axis(side=1, at = c(2.5,3.5), c("Benign", "Malignant"))
box()
axis(side = 2)
# Example: Correlation matrix
cor(df2[, c("clump_thickness", "uniformity_of_cell_size","uniformity_of_cell_shape", "marginal_adhesion",
"single_epithelial_cell_size", "bare_nuclei", "bland_chromatin", "normal_nucleoli", "mitoses",
"class")])
# Example: Identify outliers using boxplot
boxplot(df2$clump_thickness, col = "skyblue", main = "Boxplot")
boxplot(df2$uniformity_of_cell_size, col = "skyblue", main = "Boxplot")
boxplot(df2$uniformity_of_cell_shape, col = "skyblue", main = "Boxplot")
boxplot(df2$marginal_adhesion, col = "skyblue", main = "Boxplot")
boxplot(df2$single_epithelial_cell_size, col = "skyblue", main = "Boxplot")
boxplot(df2$bare_nuclei, col = "skyblue", main = "Boxplot")
boxplot(df2$bland_chromatin, col = "skyblue", main = "Boxplot")
boxplot(df2$normal_nucleoli, col = "skyblue", main = "Boxplot")
boxplot(df2$mitoses, col = "skyblue", main = "Boxplot")
boxplot(df2$class, col = "skyblue", main = "Boxplot")
corrplot(cort, order = "hclust", tl.cex = 0.7)
install.packages("corrplot")
corrplot(cort, order = "hclust", tl.cex = 0.7)
library('corrplot')
corrplot(cort, order = "hclust", tl.cex = 0.7)
#EDA
#Correlation matrix
cort <- cor(df2[, c("clump_thickness", "uniformity_of_cell_size","uniformity_of_cell_shape", "marginal_adhesion",
"single_epithelial_cell_size", "bare_nuclei", "bland_chromatin", "normal_nucleoli", "mitoses",
"class")])
corrplot(cort, order = "hclust", tl.cex = 0.7)
corrplot(cort, order = "hclust", tl.cex = 0.5)
corrplot(cort, order = "hclust", tl.cex = 0.2)
corrplot(cort, order = "hclust", tl.cex = 0.7)
corrplot(cort, order = "hclust", tl.cex = 1.0)
highlyCor <- colnames(df2)[findCorrelation(cort, cutoff = 0.9, verbose = TRUE)]
install.packages("caret")
install.packages("caret")
