sample_sizes <- numeric(length(power_targets))
# Perform power analysis for each target power
for (i in seq_along(power_targets)) {
power_result <- power.z.test(effect = (mu0 - mu_alt)/sigma, sigma=sigma, alpha = alpha, power = power_targets[i], alternative = "less")
sample_sizes[i] <- ceiling(power_result$n)
}
#parameters
sigma = 15
#power targets
power_targets <- c(0.80, 0.85, 0.90)
# Initialize a vector to store sample sizes
sample_sizes <- numeric(length(power_targets))
# Perform power analysis for each target power
for (i in seq_along(power_targets)) {
power_result <- power.z.test(effect = (mu0 - mu_alt)/sigma, sigma=sigma, alpha = alpha, power = power_targets[i], test = "one.tail")
sample_sizes[i] <- ceiling(power_result$n)
}
# Display the results
cat("Sample Sizes for Target Powers:\n")
cat(paste("Power =", power_targets, ": Sample Size =", sample_sizes), sep = "\n")
# Conclusion
cat("\nConclusion:\n")
cat("To achieve the desired levels of power (80%, 85%, and 90%),\n")
cat("you would need sample sizes of", sample_sizes, "respectively.\n")
#parameters
sigma = 15
#power targets
power_targets <- c(0.80, 0.85, 0.90)
# Initialize a vector to store sample sizes
sample_sizes <- numeric(length(power_targets))
# Perform power analysis for each target power
for (i in seq_along(power_targets)) {
power_result <- power.z.test(effect = (mu0 - mu_alt), sigma=sigma, alpha = alpha, power = power_targets[i], test = "one.tail")
sample_sizes[i] <- ceiling(power_result$n)
}
# Display the results
cat("Sample Sizes for Target Powers:\n")
cat(paste("Power =", power_targets, ": Sample Size =", sample_sizes), sep = "\n")
# Conclusion
cat("\nConclusion:\n")
cat("To achieve the desired levels of power (80%, 85%, and 90%),\n")
cat("you would need sample sizes of", sample_sizes, "respectively.\n")
#parameters
sigma = 15
#power targets
power_targets <- c(0.80, 0.85, 0.90)
# Initialize a vector to store sample sizes
sample_sizes <- numeric(length(power_targets))
# Perform power analysis for each target power
for (i in seq_along(power_targets)) {
power_result <- power.z.test(n = NULL, sigma = sigma, p1 = mu_alt, p2 = mu0, sig.level = alpha, power = power_targets[i], alternative = "two.sided")
sample_sizes[i] <- ceiling(power_result$n)
}
#defining values to be used in the calculation
alpha <- 0.05 #Significance Level
mu0 <- 60 #Null Hypothesis mean
sig <- 15 #Population Standard deviation
#Alternative Hypothesis mean
altmu <- 55
# Calculate power of the test
power <- power.z.test(n=length(data), effect=(mu0-altmu), sigma=sig, alpha=alpha, test="one.tail", power=NULL)
print(power)
#defining values to be used in the calculation
alpha <- 0.05 #Significance Level
mu0 <- 60 #Null Hypothesis mean
sig <- 15 #Population Standard deviation
#Alternative Hypothesis mean
altmu <- 55
# Calculate power of the test
power <- power.z.test(n=length(data$alkaline), effect=(mu0-altmu), sigma=sig, alpha=alpha, test="one.tail", power=NULL)
print(power)
#defining values to be used in the calculation
alpha <- 0.05 #Significance Level
mu0 <- 60 #Null Hypothesis mean
sig <- 15 #Population Standard deviation
#Alternative Hypothesis mean
altmu <- 55
# Calculate power of the test
power <- power.z.test(n=length(data$alkaline), effect=(mu0-altmu), sigma=sig, alpha=alpha, test="one.tail", power=NULL)$power
print(power)
#Suitable alternate hypotheses from 50 to 70
mu_alt <- seq(50,70,by = 1)
#Calculating power for each alternate hypotheses
power_values <- numeric(length(mu_alt))
for (i in seq_along(mu_alt)) {
effect_size <- (mu0 - mu_alt[i])
power_values[i] <- power.z.test(effect = effect_size, n = 100, sigma = sig, alpha =  alpha, test = "one.tail")$power
}
#plotting the power curve
plot(mu_alt, power_values, type="b", xlab="Alternative mean Î¼", ylab = "Power", main="Power Curve", ylim = c(0,1))
#reference line
abline(h=0.8, v=0, col = "red")
text(55, 0.85, "80% Power", col = "blue") #text labels
#parameters
sigma = 15
#power targets
power_targets <- c(0.80, 0.85, 0.90)
# Initialize a vector to store sample sizes
sample_sizes <- numeric(length(power_targets))
# Perform power analysis for each target power
power_results <- sapply(power_targets, function(target_power) {
power.z.test(n = NULL, sigma = sigma, effect = mu0-mu_alt, sig.level = alpha, power = target_power, alternative = "two.tail")$n
})
#parameters
sigma = 15
#power targets
power_targets <- c(0.80, 0.85, 0.90)
# Initialize a vector to store sample sizes
sample_sizes <- numeric(length(power_targets))
# Perform power analysis for each target power
for (i in seq_along(power_targets)){
power_result <- power.z.test(effect = (mu0-mu_alt), alpha=0.05, power = power_targets[i], test= "one.tail")
sample_sizes <- ceiling(power_result$n)
}
# Display the results
cat("Sample Sizes for Target Powers:\n")
cat(paste("Power =", power_targets, ": Sample Size =", sample_sizes), sep = "\n")
# Conclusion
cat("\nConclusion:\n")
cat("To achieve the desired levels of power (80%, 85%, and 90%),\n")
cat("you would need sample sizes of", sample_sizes, "respectively.\n")
#parameters
sigma = 15
#power targets
power_targets <- c(0.80, 0.85, 0.90)
# Initialize a vector to store sample sizes
sample_sizes <- numeric(length(power_targets))
# Perform power analysis for each target power
for (i in seq_along(power_targets)){
power_result <- power.z.test(effect = (mu0-mu_alt), alpha=0.05, power = power_targets[i], test= "one.tail");
sample_sizes <- ceiling(power_result$n)
}
# Display the results
cat("Sample Sizes for Target Powers:\n")
cat(paste("Power =", power_targets, ": Sample Size =", sample_sizes), sep = "\n")
# Conclusion
cat("\nConclusion:\n")
cat("To achieve the desired levels of power (80%, 85%, and 90%),\n")
cat("you would need sample sizes of", sample_sizes, "respectively.\n")
# Define parameters
alpha <- 0.05         # Significance level
mu0 <- 60            # Null hypothesis mean
sig <- 15          # Standard deviation (assumed)
mu_alt <- 55 # Alternative hypothesis mean
power_targets <- c(0.80, 0.85, 0.90)  # Power targets
# Initialize a vector to store sample sizes
sample_sizes <- numeric(length(power_targets))
# Perform power analysis for each target power
for (i in seq_along(power_targets)) {
power_result <- pwr.norm.test(d = (mu0 - mu_alt)/sig, sig.level = alpha, power = power_targets[i], alternative = "two.sided")
sample_sizes[i] <- ceiling(power_result$n)
}
# Display the results
cat("Sample Sizes for Target Powers:\n")
cat(paste("Power =", power_targets, ": Sample Size =", sample_sizes), sep = "\n")
# Conclusion
cat("\nConclusion:\n")
cat("To achieve the desired levels of power (80%, 85%, and 90%),\n")
cat("you would need sample sizes of", sample_sizes, "respectively.\n")
#Defining parameters
mu0 <- 60
mualt <- 65
sig <- 15
#power targets
p_targets <- c(0.80, 0.85, 0.90)
# Initialize a vector to store sample sizes
s_sizes <- numeric(length(p_targets))
# Perform power analysis for each target power
for (i in seq_along(p_targets)) {
p_result <- pwr.norm.test(d = abs((mu0 - mualt))/sig, sig.level = alpha, power = p_targets[i], alternative = "two.sided")
s_sizes[i] <- ceiling(p_result$n)
}
# Display the results
cat("Sample Sizes for Target Powers:\n")
cat(paste("Power =", p_targets, ": Sample Size =", s_sizes), sep = "\n")
# Conclusion
cat("\nConclusion:\n")
cat("To achieve the desired levels of power (80%, 85%, and 90%),\n")
cat("you would need sample sizes of", s_sizes, "respectively.\n")
unlink("5301_002_project2_cache", recursive = TRUE)
setwd('C:/Users/soham/Documents')
data <- read.csv('alkaline.txt', header = TRUE, sep="", dec=".")
knitr::opts_chunk$set(echo = TRUE)
cor(df$sales, df$TV)
setwd('C:/Users/soham/Downloads/')
df <- read.csv(file = 'Advertising.csv',header = TRUE, sep = ",", dec = ".")
df
#Sales vs TV
plot(df$sales, df$TV, xlab = "Sales", ylab = "TV", main = "Sales vs TV")
#Sales vs TV
plot(df$sales, df$TV, xlab = "Sales", ylab = "TV", main = "Sales vs TV")
#Sales vs Radio
plot(df$sales, df$radio, xlab = "Sales", ylab = "Radio", main ="Sales vs Radio" )
#Sales vs Newspaper
plot(df$sales, df$newspaper, xlab = "Sales", ylab = "Newspaper", main = "Sales vs Newspaper")
cor(df$sales, df$TV)
cor(df$sales, df$radio)
cor(df$sales, df$newspaper)
fit_1 <- lm(formula = sales ~ TV, data = df)
summary(fit_1)
fitted_values <- fitted(fit_1)
fitted_values
fitted_values <- fitted(fit_1)
fitted_values
par(mfrow=c(1,3))
plot(fit_1, which=1) # Residuals vs. Fitted
plot(fit_1, which=2) # Q-Q Plot
plot(df$TV, df$Sales, main="Sales vs. TV with Fitted Line", xlab="TV", ylab="Sales", pch=19)
abline(fit_1, col="red")
df$TV_squared <- df$TV^2
model_quad <- lm(sales ~ TV + TV_squared, data=df)
summary(model_quad) # Print model output
set.seed(123) # Set seed for reproducibility
train_index <- sample(1:nrow(df), 0.7*nrow(df)) # 70% training data
train_data <- df[train_index,]
test_data <- df[-train_index,]
model_train <- lm(sales ~ TV, data=train_data)
model_test_pred <- predict(model_train, newdata=test_data)
mse_train <- mean((predict(model_train, newdata=train_data) - train_data$sales)^2)
mse_test <- mean((model_test_pred - test_data$sales)^2)
mse_train
mse_test
library(caret)
set.seed(123)
cv_results <- train(sales ~ TV, data=df, method="lm", trControl=trainControl(method="cv", number=5))
cv_results$results$RMSE # Root Mean Squared Error
par(mfrow=c(1,3))
plot(fit_1, which=1) # Residuals vs. Fitted
plot(fit_1, which=2) # Q-Q Plot
plot(df$TV, df$Sales, main="Sales vs. TV (Fitted Line)", xlab="TV", ylab="Sales", pch=19)
abline(fit_1, col="red")
par(mfrow=c(1,3))
plot(fit_1, which=1) # Residuals vs. Fitted
plot(fit_1, which=2) # Q-Q Plot
plot(df$TV, df$sales, main="Sales vs. TV (Fitted Line)", xlab="TV", ylab="Sales", pch=19)
abline(fit_1, col="red")
df$TV_squared <- df$TV^2
model_quad <- lm(sales ~ TV + TV_squared, data=df)
summary(model_quad) # Print model output
model_train <- lm(sales ~ TV, data=train_data)
model_test_pred <- predict(model_train, newdata=test_data)
mse_train <- mean((predict(model_train, newdata=train_data) - train_data$sales)^2)
mse_test <- mean((model_test_pred - test_data$sales)^2)
mse_train
mse_test
df$TV_squared <- df$TV^2
model_quad <- lm(sales ~ TV + TV_squared, data=df)
summary(model_quad) # Print model output
set.seed(123) # Set seed for reproducibility
train_index <- sample(1:nrow(df), 0.7*nrow(df)) # 70% training data
train_data <- df[train_index,]
test_data <- df[-train_index,]
model_train <- lm(sales ~ TV, data=train_data)
model_test_pred <- predict(model_train, newdata=test_data)
mse_train <- mean((predict(model_train, newdata=train_data) - train_data$sales)^2)
mse_test <- mean((model_test_pred - test_data$sales)^2)
mse_train
mse_test
df$TV_squared <- df$TV^2
model_quad <- lm(sales ~ TV + TV_squared, data=df)
summary(model_quad) # Print model output
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(ISLR)
df <- Default
head(df, n= c(5))
par(mfrow = c(1,2))
con_table <- table(df$default,df$student)
plot(con_table, main = "Default vs Student")
plot(df$default, df$balance, main="Default vs Student", xlab = "default", ylab = "balance")
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income")
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
plot(con_table, main = "Default vs Student")
plot(df$default, df$balance, main="Default vs Student", xlab = "default", ylab = "balance")
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income")
#set seed for reproducibility
set.seed(1)
#Use 70% of the dataset as training set and the remaining 30% testing set
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train <- df[!sample, ]
test <- df[!sample, ]
#fit the regression model
model <- lm(default ~ student+balance+income, data = train)
#model summary
summary(model)
#set seed for reproducibility
set.seed(1)
#Use 70% of the dataset as training set and the remaining 30% testing set
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train <- df[!sample, ]
test <- df[!sample, ]
#fit the regression model
model <- glm(default ~ student+balance+income, data = train, family="binomial")
#model summary
summary(model)
#set seed for reproducibility
set.seed(1)
#Use 70% of the dataset as training set and the remaining 30% testing set
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train <- df[!sample, ]
test <- df[!sample, ]
#fit the regression model
fit_1 <- glm(default ~ student+balance+income, data = train, family="binomial")
#model summary
summary(fit_1)
#set seed for reproducibility
set.seed(1)
#fit the regression model
fit_1 <- glm(default ~ student+balance+income, data = train, family="df")
summary(Default)
#set seed for reproducibility
set.seed(1)
#fit the regression model
fit_1 <- glm(default ~ student+balance+income, data = train, family="df")
#set seed for reproducibility
set.seed(1)
#fit the regression model
fit_1 <- glm(default ~ student+balance+income, data = df, family="binomial")
#model summary
summary(fit_1)
#set seed for reproducibility
set.seed(1)
#Use 70% of the dataset as training set and the remaining 30% testing set
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train <- df[!sample, ]
test <- df[!sample, ]
fit_2 <- glm(default ~ student+blance+income, data = train, family = "binomial")
#set seed for reproducibility
set.seed(1)
#Use 70% of the dataset as training set and the remaining 30% testing set
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train <- df[!sample, ]
test <- df[!sample, ]
fit_2 <- glm(default ~ student+balance+income, data = train, family = "binomial")
summary(fit_2)
setwd("C:/Users/soham/Documents/Github rep/5302-project")
df <- read.csv(file = "./dataset/breast-cancer-wisconsin.data", sep=",", header = FALSE)
df
str(df)
table(Default$default, Default$student)
set.seed(123)  # for reproducibility
n <- nrow(Default)
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
predictors <- names(Default)[names(Default) != "default"]
accuracy_results <- numeric(length(predictors))
for (predictor in predictors) {
formula <- as.formula(paste("default ~", predictor))
fit <- glm(formula, data = train_data, family = "binomial")
predicted <- predict(fit, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
conf_matrix <- table(predicted_class, test_data$default)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy_results[predictor] <- accuracy
}
# Find the predictor with the highest accuracy
best_predictor <- names(accuracy_results)[which.max(accuracy_results)]
best_accuracy <- max(accuracy_results)
# Compare with the previous model (fit1)
improvement <- best_accuracy - accuracy
improvement
set.seed(123)  # for reproducibility
n <- nrow(Default)
#train and test split
train_indices <- sample(1:n, 0.7 * n)
train_data <- Default[train_indices, ]
test_data <- Default[-train_indices, ]
#model fitting
fit1_train <- glm(default ~ student, data = train_data, family = "binomial")
predicted <- predict(fit1_train, newdata = test_data, type = "response")
predicted_class <- ifelse(predicted > 0.5, "Yes", "No")
#displaying the confusion matrix
conf_matrix <- table(predicted_class, test_data$default)
conf_matrix
#Displaying the accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
con_table
# Bar plot for 'default' and 'student'
barplot(cont_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"))
con_table
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"))
con_table
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes") main = c("Default", "Student"))
con_table
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = c("Default", "Student"))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = c("Default", "Student"))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
plot(con_table, main = "Default vs Student")
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
plot(con_table, main = "Default vs Student")
library(plyr)
library(ISLR)
df <- Default
head(df, n= c(5))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
plot(con_table, main = "Default vs Student")
plot(df$default, df$balance, main="Default vs Student", xlab = "default", ylab = "balance")
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income")
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = c("Default", "Student"))
plot(df$default, df$balance, main="Default vs Student", xlab = "default", ylab = "balance")
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income")
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income")
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue")
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue"))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"),legend = TRUE)
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue"),legend = TRUE)
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue"))
con_table
# Contingency table for 'default' and 'student'
cont_table <- table(Default$default, Default$student)
# Display the contingency table
cont_table
# Perform chi-square test
chi_square_test <- chisq.test(cont_table)
chi_square_test
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student", xlab = "Default")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue"))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student", xlab = "Default   Student")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue"))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student", xlab = "Default      Student")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue"))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student", xlab = "Default            Student")
plot(df$default, df$balance, main="Default vs Balance", xlab = "default", ylab = "balance", col = c("red", "blue"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue"))
par(mfrow = c(1,3))
con_table <- table(df$default,df$student)
# Bar plot for 'default' and 'student'
barplot(con_table, beside = TRUE, legend = TRUE, col = c("red", "blue"), names.arg = c("No", "Yes"), main = "Default vs Student", xlab = "Default            Student")
# Boxplot for 'default' vs 'balance'
boxplot(balance ~ default, data = Default, col = c("blue", "red"), xlab = "Default", ylab = "Balance")
# Add labels and a legend
legend("topright", legend = levels(Default$default), fill = c("blue", "red"))
plot(df$default, df$income, main = "Default vs Income", xlab = "default", ylab = "income", col = c("red", "blue"))
# Contingency table for 'default' and 'student'
cont_table <- table(Default$default, Default$student)
# Display the contingency table
cont_table
# Perform chi-square test
chi_square_test <- chisq.test(cont_table)
chi_square_test
summary(Default)
#set seed for reproducibility
set.seed(1)
#fit the regression model
fit_1 <- glm(default ~ student+balance+income, data = df, family="binomial")
#model summary
summary(fit_1)
